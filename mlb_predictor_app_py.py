# -*- coding: utf-8 -*-
"""mlb_predictor_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U5QKwIg_fSSh6qmgXZSxNoqD1GrujxyC
"""

!pip install -q pybaseball xgboost scikit-learn streamlit ipywidgets pandas --quiet
!pip install -U pybaseball --quiet

import streamlit as st
import pandas as pd
import numpy as np
from pybaseball import statcast_pitcher, playerid_lookup
from xgboost import XGBRegressor, XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error

# ------------------------ CONFIGURACI√ìN ------------------------
st.set_page_config(page_title="MLB Predictor", layout="centered")
st.title("‚öæ Predicci√≥n MLB: Ganador, Hits y Carreras")
st.write("Selecciona los equipos, pitchers y la fecha para realizar predicciones.")

# ------------------------ INPUTS DE USUARIO ------------------------

teams = [
    'ARI', 'ATL', 'BAL', 'BOS', 'CHW', 'CHC', 'CIN', 'CLE',
    'COL', 'DET', 'HOU', 'KCR', 'LAA', 'LAD', 'MIA', 'MIL',
    'MIN', 'NYY', 'NYM', 'OAK', 'PHI', 'PIT', 'SDP', 'SFG',
    'SEA', 'STL', 'TBR', 'TEX', 'TOR', 'WSN'
]

home_team = st.selectbox("Equipo Local", teams)
away_team = st.selectbox("Equipo Visitante", [t for t in teams if t != home_team])
pitcher_home = st.text_input("Pitcher Local (Apellido, Nombre)", "Cole, Gerrit")
pitcher_away = st.text_input("Pitcher Visitante (Apellido, Nombre)", "Strider, Spencer")
fecha_inicio = st.date_input("Fecha desde", pd.to_datetime("2024-03-01"))
fecha_fin = st.date_input("Fecha hasta", pd.to_datetime("2024-06-01"))

# ------------------------ FUNCIONES AUXILIARES ------------------------

@st.cache_data(show_spinner=True)
def obtener_datos_pitcher(nombre, fecha_inicio, fecha_fin):
    nombre_split = nombre.split(", ")
    lookup = playerid_lookup(nombre_split[1], nombre_split[0])
    if lookup.empty:
        return None
    pid = lookup.iloc[0]['key_mlbam']
    return statcast_pitcher(str(fecha_inicio), str(fecha_fin), pid)

def entrenar_modelos(df_home, df_away):
    def preparar_df(df, label):
        df = df[['release_speed', 'spin_rate', 'pfx_x', 'pfx_z', 'plate_x', 'plate_z', 'balls', 'strikes', 'outs_when_up', 'description']]
        df = df.dropna()
        df['target_hit'] = df['description'].apply(lambda x: 1 if x in ['hit_into_play', 'hit_into_play_score', 'home_run'] else 0)
        df['target_runs'] = df['target_hit'] * np.random.randint(0, 3, size=len(df))  # simulaci√≥n aleatoria de carreras por hit
        df['pitcher_label'] = label
        return df

    df_home_clean = preparar_df(df_home, 'home')
    df_away_clean = preparar_df(df_away, 'away')

    df = pd.concat([df_home_clean, df_away_clean])

    X = df[['release_speed', 'spin_rate', 'pfx_x', 'pfx_z', 'plate_x', 'plate_z', 'balls', 'strikes', 'outs_when_up']]
    y_hits = df['target_hit']
    y_runs = df['target_runs']

    x_train, x_test, y_train, y_test = train_test_split(X, y_hits, test_size=0.2, random_state=42)
    model_hits = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
    model_hits.fit(x_train, y_train)

    model_runs = XGBRegressor()
    model_runs.fit(x_train, y_runs)

    return model_hits, model_runs

def predecir_resultados(model_hits, model_runs, df_home, df_away):
    def simular(df):
        df = df[['release_speed', 'spin_rate', 'pfx_x', 'pfx_z', 'plate_x', 'plate_z', 'balls', 'strikes', 'outs_when_up']].dropna()
        if df.empty:
            return 0, 0
        hits = model_hits.predict(df)
        runs = model_runs.predict(df)
        return hits.sum(), runs.sum()

    hits_home, runs_home = simular(df_home)
    hits_away, runs_away = simular(df_away)

    ganador = home_team if runs_home > runs_away else away_team

    return {
        "home_hits": int(hits_home),
        "away_hits": int(hits_away),
        "home_runs": round(runs_home, 1),
        "away_runs": round(runs_away, 1),
        "ganador": ganador
    }

# ------------------------ BOT√ìN DE EJECUCI√ìN ------------------------

if st.button("üîç Ejecutar Predicci√≥n"):
    with st.spinner("Obteniendo datos de pitchers..."):
        df_home = obtener_datos_pitcher(pitcher_home, fecha_inicio, fecha_fin)
        df_away = obtener_datos_pitcher(pitcher_away, fecha_inicio, fecha_fin)

        if df_home is None or df_away is None or df_home.empty or df_away.empty:
            st.error("No se pudo obtener informaci√≥n de uno o ambos pitchers. Revisa los nombres y fechas.")
        else:
            with st.spinner("Entrenando modelos y generando predicciones..."):
                model_hits, model_runs = entrenar_modelos(df_home, df_away)
                resultado = predecir_resultados(model_hits, model_runs, df_home, df_away)

                st.success("‚úÖ Predicci√≥n completada")
                st.markdown(f"### Resultado:")
                st.markdown(f"- **Ganador probable**: `{resultado['ganador']}`")
                st.markdown(f"- **{home_team} Hits**: {resultado['home_hits']}, Carreras estimadas: {resultado['home_runs']}")
                st.markdown(f"- **{away_team} Hits**: {resultado['away_hits']}, Carreras estimadas: {resultado['away_runs']}")

